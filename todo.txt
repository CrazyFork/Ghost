
# others:

  # [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)

    cors 主要解决xhr跨域调用的问题, 第三方主机如果允许跨域, 必须设置相应的cors header.
    cors 的方式有三种:
      * Simple requests: 简单调用第三方服务
      * Preflighted requests: 先发一个试探性的请求看第三方服务是否允许跨域
      * Requests with credentials: 带cookie的第三方服务调用

# terms:

  slug - url链接最后的可阅读的文本部分 see @ http://www.wpbeginner.com/glossary/post-slug/



# Links:
* [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)
* ! [an-introduction-to-oauth-2](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2)
* [mysql data types](https://www.tutorialspoint.com/mysql/mysql-data-types.htm)



todo:
  done:
    [outh2的流程](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2):
      大致流程如下:
        * 使用oauth2首先你的app需要在目标api(qq, facebook...)服务中注册, 填写appId, callbackuri, rejecturi...
        * 然后你的app会获得clientId, client credential
        * 然后你请求第三方token的url, 带上你的clientId, client credential, scope(限定你获取用户信息的范围),
          grant_type(oauth大致的有4种类型)
        * 这步如果成功, web client(通常是浏览器), 会redirect你注册的url并带上access token信息
        * 然后你通过获得的 Bearer token 来请求第三方服务, 获取用户基本信息, 朋友列表...etc

    core/server/views/user-error.hbs 文件中的asset 指令是哪来的
      server/helpers

    dabase:
      see docker mysql image
      why database schema has a uuid field
        http://stackoverflow.com/questions/45399/advantages-and-disadvantages-of-guid-uuid-database-keys

    env = process.env.NODE_ENV || 'development'; 这个是如何应用的
      >  NODE_ENV=production sample.js --foo bar

    Etag creation:
      ETag: '"' + crypto.createHash('md5').update(buf, 'utf8').digest('hex') + '"',

      https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching

    blogApp.enable('trust proxy');
      https://expressjs.com/en/guide/behind-proxies.html
      启用之后，注意这里的默认值的意思

    sitemap.xsl, robots.txt
      https://en.wikipedia.org/wiki/Sitemaps
      觉得没啥用呀，除了能让crawler发现没有关联的节点外

    error 如何处理的 new errors.ValidationError({message: i18n.t('errors.api.authentication.noEmailProvided')})
    why uuid field no unique contraint: 由于uuid基本就不可能重复， 毕竟比彗星撞地球的概率都低，所以没有做unique限制吧

  pending:
    gulpfile vs Gruntfile
    what is site map
    整个项目的目录组成
    ghost-url.js 是在哪里替换的
    nodejs Crypto module
    read ghost-admin project's code
    http://semver.org/
    Intl APIs 查阅下
    clear todos in this project
    https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
    familiar with fs-extra: https://github.com/jprichardson/node-fs-extra
    git submodule
    整理下这个项目的代码到github blog上， 应用的模式呀 等等， 这个放到最后处理
    orm mapping - bookshelf
    ghost 3rd api - http://api.ghost.org/docs/parameters
    review core/server/auth folder
    https://github.com/CrazyFork/passport-oauth2
    nodejs util module
    bunyan 在项目中如何创建logger的
      /core/server/logging

    https://github.com/CrazyFork/oauth2orize - 这个源码等着读了
    把todo中的rxjs视频教程清了, 以后所有的Promise都替换成RxJS？
    authenicate 中的逻辑需要好好看下, authenticate user/client 的区别是什么？需要画脑图？
    core/server/auth/passport.js 这个需要重新看下到时候
    db升级和orm冲突如何解决
    core/server/data/schema/
      default-settings.json 中的validations搞什么的
      schema 中的reference字段是如何被使用的
      server/data/schema/default-settings.json 干啥的
    be familiar with knex API
      withSchema, as,
    mysql date datetype
    timezone 的用法
    权限校验是怎么设计的
    how the `core/server/events` module is used
    bookshelf model.attributes
    how validation is used & why

    /Users/interaction/workspace/nodejs/Ghost/core/server/data/db/connection.js
      这里的配置是什么意思

    core/server/middleware/index.js
      中的upload是怎么处理的
        multer
        加一个fileupload的sanity checker
        tempdir

    slack/test
    how api routes is configed.







reading stack:
/Users/interaction/workspace/nodejs/Ghost/core/server/routes
/Users/interaction/workspace/nodejs/Ghost/core/server/routes/api.js

/Users/interaction/workspace/nodejs/Ghost/core/server/auth/oauth.js
/Users/interaction/workspace/nodejs/Ghost/core/server/auth/passport.js

