# Notations:
:bm bookmark
:todo

# about this file
这个文件之所以用了类似markdown的语法, 而没有用markdown是为了保持缩进的灵活性

# nodejs

access system env variables:
system env variables are good place to place custom config database password or other dynamic injected values


  >printenv
  or
  >process.env


node spawn vs exec:
http://www.hacksparrow.com/difference-between-spawn-and-exec-of-node-js-child_process.html

spawn 返回的是流, 是完全异步的, 你可以 on('data', on('end,
exec 则是同步的, 会返回一个buffer, 缓存child_process返回的结果, 这个buffer的max size是200kb


crypto usage:

  // we can use crypto to create md5 on front-end project.
  return (crypto.createHash('md5').update(packageInfo.version + Date.now()).digest('hex')).substring(0, 10);


handle http request, add request timeout, and cancel request:

@core/server/utils/image-size-from-url.js

nodejs i18n(国际化):
  Intl.js and Node: https://www.npmjs.com/package/intl
    Node.js 0.12 has the Intl APIs built-in, but only includes the English locale data by default.
    If your app needs to support more locales than English, you'll need to get Node to load the
    extra locale data, or use intl npm package to patch the runtime with the Intl polyfill.


nodejs dirs:

  __dirname 当前文件的目录
  process.cwd() nodejs进程启动的目录 node xx.js 的目录
  path.join(os.tmpdir(), utils.uid(10)) // create a temp dir


# This Project

  这个项目应该是分3个模块:
  * ghost: 面向用户的project
  * admin:
  * casper: 主题引擎


  ## build process:

    gulp-nodemon
      Gulp-nodemon looks almost exactly like regular nodemon, but it's made for use with gulp tasks.

    chalk:
      用于彩色输出的

    gulp-demon:
      nodemon + livereload 的使用

    jscsrc: 检查代码规范的工作流需要注意下


  ## project dependencies

    * bookshelf: orm mapping lib
    * unidecode: ASCII transliterations of Unicode text

      >unidecode("に間違いがないか、再度確認してください。再読み込みしてください。");
      >'niJian Wei iganaika, Zai Du Que Ren sitekudasai. Zai Du miIp misitekudasai. '
    * cheerio: jquery like api to manipulate html
    * intl-messageformat: 处理i18n format的
    * intl: ECMA 国际化规范的api实现
      > In December 2012, ECMA International published the first edition of Standard ECMA-402,
      better known as the ECMAScript Internationalization API. This specification provides
      the framework to bring long overdue localization methods to ECMAScript implementations.
    * moment-timezone: 处理时区时间转换的
    * fs-extra: drop replacement for node fs module
    * nconf : Hierarchical node.js configuration with files, environment variables, command-line arguments, and atomic object merging.
      用来处理环境变量配置的, 很高级很好的库
    *


  ## notes:
    * 301 redirect add one year cache.
      res.set({'Cache-Control': 'public, max-age=' + utils.ONE_YEAR_S});
      res.redirect(301, path);

    * i18n是如何处理的需要注意下, 主要是i18n.js & translations/en.json 文件
    * loadash的库看来我还是需要应用下, _.isNull 这个特性挺好的
    * 这个项目没有应用真正的logger, 用chalk来替代的
    * readFile = Promise.promisify(fs.readFile);
      http://bluebirdjs.com/docs/api/promise.promisify.html
    * zip-folder.js 如何创建zip文件用node， local-file-store.js 演示了如何创建zip
    * 时区如何处理的 moment-timezone.
    * error.js 中典型的nodejs继承模式, 这也就是为什么errors里边的function没有return任何东西的原因
    * core/server/views/user-error.hbs
      这个文件的meta tag, 和 asset 指令
    * core/server/storage/* 这个文件生成资源的算法需要看下, 这个很经典！
    * localUtils.makePathsAbsolute.bind(nconf);//:bm - mixin pattern @ config module









todo:
  done:
    [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)


  pending:
    gulpfile vs Gruntfile
    what is site map
    整个项目的目录组成
    ghost-url.js 是在哪里替换的
    nodejs Crypto module
    read ghost-admin project's code
    http://semver.org/
    Intl APIs 查阅下
    clear todos in this project
    https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
    core/server/views/user-error.hbs 文件中的asset 指令是哪来的
    familiar with fs-extra: https://github.com/jprichardson/node-fs-extra
    env = process.env.NODE_ENV || 'development'; 这个是如何应用的
      >  NODE_ENV=production sample.js --foo bar

    git submodule
    整理下这个项目的代码到github blog上， 应用的模式呀 等等， 这个放到最后处理
