# Notations:

  # inside src code:
  :bm           #bookmark
  :todo

  # this doc
  !             #high value


# about this file
这个文件之所以用了类似markdown的语法, 而没有用markdown是为了保持缩进的灵活性

# nodejs

  access system env variables:
  system env variables are good place to place custom config database password or other dynamic injected values


    >printenv
    or
    >process.env


  node spawn vs exec:
  http://www.hacksparrow.com/difference-between-spawn-and-exec-of-node-js-child_process.html

  spawn 返回的是流, 是完全异步的, 你可以 on('data', on('end,
  exec 则是同步的, 会返回一个buffer, 缓存child_process返回的结果, 这个buffer的max size是200kb


  crypto usage:

    // we can use crypto to create md5 on front-end project.
    return (crypto.createHash('md5').update(packageInfo.version + Date.now()).digest('hex')).substring(0, 10);


  handle http request, add request timeout, and cancel request:

  @core/server/utils/image-size-from-url.js

  nodejs i18n(国际化):
    Intl.js and Node: https://www.npmjs.com/package/intl
      Node.js 0.12 has the Intl APIs built-in, but only includes the English locale data by default.
      If your app needs to support more locales than English, you'll need to get Node to load the
      extra locale data, or use intl npm package to patch the runtime with the Intl polyfill.


  nodejs dirs:

    __dirname 当前文件的目录
    process.cwd() nodejs进程启动的目录 node xx.js 的目录
    path.join(os.tmpdir(), utils.uid(10)) // create a temp dir


# javascript:
  Snippets:
    path = path.replace(/\.([^\.]*)$/, '.min.$1');


# This Project

  这个项目应该是分3个模块:
  * ghost: 面向用户的project
  * admin:
  * casper: 主题引擎

  ## Directories:
    ├── api
    ├── apps
    │   ├── amp
    │   │   ├── lib
    │   │   │   ├── helpers
    │   │   │   └── views
    │   │   └── tests
    │   ├── private-blogging
    │   │   ├── lib
    │   │   │   ├── helpers
    │   │   │   └── views
    │   │   └── tests
    │   └── subscribers
    │       └── lib
    │           ├── helpers
    │           └── views
    ├── auth                            # auth related, including oauth2
    ├── config                          # config related
    │   └── env
    ├── controllers
    │   └── frontend
    ├── data
    │   ├── db
    │   ├── export
    │   ├── import
    │   ├── importer
    │   │   ├── handlers
    │   │   └── importers
    │   ├── meta
    │   ├── migration
    │   │   └── fixtures
    │   ├── schema
    │   │   └── clients
    │   ├── slack
    │   ├── validation
    │   └── xml
    │       ├── rss
    │       └── sitemap
    ├── events                            # a EventEmiter helper class
    ├── helpers                           # handlebars helpers, for me, provides no values to read this, i use no server-side rendering, or with another lib to do this (eg. reactjs)
    │   └── tpl                           # handlebars templates, gernate pagination etc...
    ├── logging                           # server side logging
    ├── mail                              # send email
    │   └── templates
    │       └── raw
    ├── middleware
    │   ├── api
    │   └── validation
    ├── models
    │   ├── base
    │   └── plugins
    ├── permissions
    ├── routes
    ├── scheduling                        # scheduling for some url request (service endpoints)
    │   └── post-scheduling
    ├── storage
    ├── translations
    ├── utils
    └── views

  ## build process:

    gulp-nodemon
      Gulp-nodemon looks almost exactly like regular nodemon, but it's made for use with gulp tasks.

    chalk:
      用于彩色输出的

    gulp-demon:
      nodemon + livereload 的使用

    jscsrc: 检查代码规范的工作流需要注意下




  ## project dependencies

    * bookshelf: orm mapping lib
    * unidecode: ASCII transliterations of Unicode text

      >unidecode("に間違いがないか、再度確認してください。再読み込みしてください。");
      >'niJian Wei iganaika, Zai Du Que Ren sitekudasai. Zai Du miIp misitekudasai. '
    * cheerio: jquery like api to manipulate html
    * intl-messageformat: 处理i18n format的
    * intl: ECMA 国际化规范的api实现
      > In December 2012, ECMA International published the first edition of Standard ECMA-402,
      better known as the ECMAScript Internationalization API. This specification provides
      the framework to bring long overdue localization methods to ECMAScript implementations.
    * moment-timezone: 处理时区时间转换的
    * fs-extra: drop replacement for node fs module
    * nconf : Hierarchical node.js configuration with files, environment variables, command-line arguments, and atomic object merging.
      用来处理环境变量配置的, 很高级很好的库
      cascading config lib
    * passport - 验证用户权限信息的通用库
      * [passport-oauth2] - passport oauth2实现 - 窝草, 难道要把这个项目先看了 :(
        这个货是用来这个blog项目调用google，facebook其他项目的oauth2的封装, 获取这些服务的第三方用户信息
        https://github.com/jaredhanson/passport-oauth2

      * passport-ghost: 这个项目的自定义passport strategy实现

    * prettyjson: 格式化json格式, 转换成类似yaml格式的
    * bunyan: nodejs logger
    * oauth2orize - https://github.com/CrazyFork/oauth2orize, 服务端创建oauth2流程的帮助库
    * jsonpath - https://github.com/flitbit/json-path, query json with xpath like syntax.
    * nodemailer - util for sending email
    * html-to-text - https://github.com/werk85/node-html-to-text， 将html 转成文本会保留大部分格式
    * ! validator - https://github.com/chriso/validator.js, validate text & other kinds of things.






  ## Passport:

    ! coer/server/auth/* passport的使用 & 实现oauth:
      * auth-strategies.js - 定义了不同的strategy, 参数从哪传入的？
      * authenticate.js - 定义了不同的express设计权限校验的中间件(middleware)
        //oauth2-client-password 这里将 auth-strategies.js 定义的键值对进行了转换
        return passport.authenticate(['oauth2-client-password'], {session: false, failWithError: false},

  ## Logging:

    core/server/logging + bunyan 实现了一个file, rotating-file, stdout 3种模式的logger，在logging request, response
    的时候移除了http header中的敏感信息






  ## notes:
    * 301 redirect add one year cache.
      res.set({'Cache-Control': 'public, max-age=' + utils.ONE_YEAR_S});
      res.redirect(301, path);

    * i18n是如何处理的需要注意下, 主要是i18n.js & translations/en.json 文件
    * loadash的库看来我还是需要应用下, _.isNull 这个特性挺好的
    * 这个项目没有应用真正的logger, 用chalk来替代的
    * readFile = Promise.promisify(fs.readFile);
      http://bluebirdjs.com/docs/api/promise.promisify.html
    * zip-folder.js 如何创建zip文件用node， local-file-store.js 演示了如何创建zip
    * 时区如何处理的 moment-timezone.
    * error.js 中典型的nodejs继承模式, 这也就是为什么errors里边的function没有return任何东西的原因
    * core/server/views/user-error.hbs
      这个文件的meta tag, 和 asset 指令
    * ! core/server/storage/* 这个文件生成资源的算法需要看下, 这个很经典！
    * localUtils.makePathsAbsolute.bind(nconf);//:bm - mixin pattern @ config module
    * Bearer token : `Authorization: Bearer AbCdEf123456`
    * ! core/server/auth/* 这个模块需要重点看下, 用户验证授权, oauth2 使用和实现, password模块的整合。
    * core/server/helpers/* 这个模块需要先看下handlebars的helpers的概念和语法, 现在就大致略过一遍就好




# others:

  # [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)

    cors 主要解决xhr跨域调用的问题, 第三方主机如果允许跨域, 必须设置相应的cors header.
    cors 的方式有三种:
      * Simple requests: 简单调用第三方服务
      * Preflighted requests: 先发一个试探性的请求看第三方服务是否允许跨域
      * Requests with credentials: 带cookie的第三方服务调用




# Links:
* [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)
* ! [an-introduction-to-oauth-2](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2)




todo:
  done:
    [outh2的流程](https://www.digitalocean.com/community/tutorials/an-introduction-to-oauth-2):
      大致流程如下:
        * 使用oauth2首先你的app需要在目标api(qq, facebook...)服务中注册, 填写appId, callbackuri, rejecturi...
        * 然后你的app会获得clientId, client credential
        * 然后你请求第三方token的url, 带上你的clientId, client credential, scope(限定你获取用户信息的范围),
          grant_type(oauth大致的有4种类型)
        * 这步如果成功, web client(通常是浏览器), 会redirect你注册的url并带上access token信息
        * 然后你通过获得的 Bearer token 来请求第三方服务, 获取用户基本信息, 朋友列表...etc

    core/server/views/user-error.hbs 文件中的asset 指令是哪来的
      server/helpers


  pending:
    gulpfile vs Gruntfile
    what is site map
    整个项目的目录组成
    ghost-url.js 是在哪里替换的
    nodejs Crypto module
    read ghost-admin project's code
    http://semver.org/
    Intl APIs 查阅下
    clear todos in this project
    https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
    familiar with fs-extra: https://github.com/jprichardson/node-fs-extra
    env = process.env.NODE_ENV || 'development'; 这个是如何应用的
      >  NODE_ENV=production sample.js --foo bar
    git submodule
    整理下这个项目的代码到github blog上， 应用的模式呀 等等， 这个放到最后处理
    orm mapping - bookshelf
    ghost 3rd api - http://api.ghost.org/docs/parameters
    review core/server/auth folder
    https://github.com/CrazyFork/passport-oauth2
    nodejs util module
    bunyan 在项目中如何创建logger的

    https://github.com/CrazyFork/oauth2orize - 这个源码等着读了

    把todo中的rxjs视频教程清了, 以后所有的Promise都替换成RxJS？
    authenicate 中的逻辑需要好好看下, authenticate user/client 的区别是什么？需要画脑图？
    core/server/auth/passport.js 这个需要重新看下到时候
