# This Project

  这个项目应该是分3个模块:
  * ghost: 面向用户的project
  * admin:
  * casper: 主题引擎

  ## core server Directories:
    ├── api
    ├── apps
    │   ├── amp
    │   │   ├── lib
    │   │   │   ├── helpers
    │   │   │   └── views
    │   │   └── tests
    │   ├── private-blogging
    │   │   ├── lib
    │   │   │   ├── helpers
    │   │   │   └── views
    │   │   └── tests
    │   └── subscribers
    │       └── lib
    │           ├── helpers
    │           └── views
    ├── auth                            # auth related, including oauth2
    ├── config                          # config related
    │   └── env
    ├── controllers
    │   └── frontend
    ├── data
    │   ├── db
    │   ├── export                        # utility module for exports all tables data inside project database
    │   ├── import                        # internal modules that import db data that exported by data/export module.
    │   ├── importer                      # import db data (use data/import module)
    │   │   ├── handlers
    │   │   └── importers
    │   ├── meta                          # Microdata type of schema.org,
    │   ├── migration
    │   │   └── fixtures
    │   ├── schema                        # create databases, database infos.
    │   │   └── clients                   # encapsulate logic for manipulating mysql, sqlite, post PostgreSql
    │   ├── slack
    │   ├── validation                    # validation, utility module for checking schema & settings sanity.
    │   └── xml
    │       ├── rss
    │       └── sitemap
    ├── events                            # a EventEmiter helper class
    ├── helpers                           # handlebars helpers, for me, provides no values to read this, i use no server-side rendering, or with another lib to do this (eg. reactjs)
    │   └── tpl                           # handlebars templates, gernate pagination etc...
    ├── logging                           # server side logging
    ├── mail                              # send email
    │   └── templates
    │       └── raw
    ├── middleware
    │   ├── api
    │   └── validation
    ├── models                            # define models that this application uses
    │   ├── base                          # Bookshelf base model
    │   └── plugins                       # modify/extend Bookshelf model to mixin some behaviours
    ├── permissions                       # creates a utility to check user's permissions
    ├── routes                            # express routes, admin, front & api
    ├── scheduling                        # scheduling for some url request (service endpoints)
    │   └── post-scheduling
    ├── storage                           # control how UGC(user generated content) get stored
    ├── translations                      # i18n
    ├── utils
    └── views

  ## build process:

    gulp-nodemon
      Gulp-nodemon looks almost exactly like regular nodemon, but it's made for use with gulp tasks.

    chalk:
      用于彩色输出的

    gulp-demon:
      nodemon + livereload 的使用

    jscsrc: 检查代码规范的工作流需要注意下




  ## project dependencies

    * bookshelf: Bookshelf is a JavaScript ORM for Node.js, built on the Knex SQL query builder.
    * unidecode: ASCII transliterations of Unicode text

      >unidecode("に間違いがないか、再度確認してください。再読み込みしてください。");
      >'niJian Wei iganaika, Zai Du Que Ren sitekudasai. Zai Du miIp misitekudasai. '
    * cheerio: jquery like api to manipulate html
    * intl-messageformat: 处理i18n format的
    * intl: ECMA 国际化规范的api实现
      > In December 2012, ECMA International published the first edition of Standard ECMA-402,
      better known as the ECMAScript Internationalization API. This specification provides
      the framework to bring long overdue localization methods to ECMAScript implementations.
    * moment-timezone: 处理时区时间转换的
    * fs-extra: drop replacement for node fs module
    * nconf : Hierarchical node.js configuration with files, environment variables, command-line arguments, and atomic object merging.
      用来处理环境变量配置的, 很高级很好的库
      cascading config lib
    * passport - 验证用户权限信息的通用库
      * [passport-oauth2] - passport oauth2实现 - 窝草, 难道要把这个项目先看了 :(
        这个货是用来这个blog项目调用google，facebook其他项目的oauth2的封装, 获取这些服务的第三方用户信息
        https://github.com/jaredhanson/passport-oauth2

      * passport-ghost: 这个项目的自定义passport strategy实现

    * prettyjson: 格式化json格式, 转换成类似yaml格式的
    * bunyan: nodejs logger
    * oauth2orize - https://github.com/CrazyFork/oauth2orize, 服务端创建oauth2流程的帮助库
    * jsonpath - https://github.com/flitbit/json-path, query json with xpath like syntax.
    * nodemailer - util for sending email
    * html-to-text - https://github.com/werk85/node-html-to-text， 将html 转成文本会保留大部分格式
    * ! validator - https://github.com/chriso/validator.js, validate text & other kinds of things.
    * node-uuid, javascript to generate uuids
    * ghost-gql - https://github.com/TryGhost/GQL,
    * extract-zip-fork - https://www.npmjs.com/package/extract-zip-fork, for extract zip file.
    * glob - https://github.com/isaacs/node-glob,





  ## Passport:

    ! coer/server/auth/* passport的使用 & 实现oauth:
      * auth-strategies.js - 定义了不同的strategy, 参数从哪传入的？
      * authenticate.js - 定义了不同的express设计权限校验的中间件(middleware)
        //oauth2-client-password 这里将 auth-strategies.js 定义的键值对进行了转换
        return passport.authenticate(['oauth2-client-password'], {session: false, failWithError: false},

  ## Logging:

    core/server/logging + bunyan 实现了一个file, rotating-file, stdout 3种模式的logger，在logging request, response
    的时候移除了http header中的敏感信息


  ## db management:
    ### versioning:
      core/server/data/schema/versioning.js

      这个模块提供了处理的db migration的自动化的方式
        <db version x.x folder>
          ../migration/            # 自动化migration脚本
          ../migration/fixtures/   # 验证migration 是否成功？


  ## working with bookshelf:

    ### extends bookshelf:
      * under core/server/models/plugins folder, this project extended bookshelf using 2 techniques

        * directly extend bookshelf's prototype:
          _.extend(bookshelf.Model.prototype, {})

        * take a Bookshelf instance, modifiy its Model attribute

            function (Bookshelf) {
                var modelProto = Bookshelf.Model.prototype,

                Model = Bookshelf.Model.extend({
                  //injected methods
                })

                Bookshelf.Model = Model;
            }

      * under core/server/models/base folder, this project create a BaseModel, then using BaseModel.extend
        to further extend its behavior

        base/token.js:
          Basetoken = ghostBookshelf.Model.extend({})

        accesstoken.js:
          Accesstoken = Basetoken.extend({})

    ### notes:
      * security with bookshelf: @./models/base
        * permittedOptions method in file - `server/models/client.js`
        ? filterOptions, filterData

      * transaction with bookshelf:
        server/data/import/data-importer.js @doImport method


  ## tokens
    creation techniques:
    * create invite token - core/server/models/invite.js
      formula:
        email_token = base64(email|expire_timestamp|sha256(email+expire_timestamp))
      the way it works, it can decode base64, get these 3 tokens back, and validate email+expire_timestamp
      integrity against that sha256.

    token validations:
    * /server/api/authentication.js: this file includes the centeral apis for tokens.


  ## permissions:
    app 权限系统的设计具体看 /server/models/permission.js 简单说 permission 映射了User, App, Role.
    user Many-To-Many 了 Role, 所以获取权限的时候会 merge 掉 User对应的权限和user的role对应的权限



  ## notes: ? sort by importance or add importance flag.
    * 301 redirect add one year cache.
      res.set({'Cache-Control': 'public, max-age=' + utils.ONE_YEAR_S});
      res.redirect(301, path);

    * i18n是如何处理的需要注意下, 主要是i18n.js & translations/en.json 文件
    * loadash的库看来我还是需要应用下, _.isNull 这个特性挺好的
    * 这个项目没有应用真正的logger, 用chalk来替代的
    * readFile = Promise.promisify(fs.readFile);
      http://bluebirdjs.com/docs/api/promise.promisify.html
    * zip-folder.js 如何创建zip文件用node， local-file-store.js 演示了如何创建zip
    * 时区如何处理的 moment-timezone.
    * error.js 中典型的nodejs继承模式, 这也就是为什么errors里边的function没有return任何东西的原因
    * core/server/views/user-error.hbs
      这个文件的meta tag, 和 asset 指令
    * ! core/server/storage/* 这个文件生成资源的算法需要看下, 这个很经典！
    * localUtils.makePathsAbsolute.bind(nconf);//:bm - mixin pattern @ config module
    * Bearer token : `Authorization: Bearer AbCdEf123456`
    * ! core/server/auth/* 这个模块需要重点看下, 用户验证授权, oauth2 使用和实现, password模块的整合。
    * core/server/helpers/* 这个模块需要先看下handlebars的helpers的概念和语法, 现在就大致略过一遍就好
    * core/server/data/schema - 不得不说js的sql orm框架要比java的简洁直观好多, 相比hibernate来说太好用了
      * clients/mysql , js@checkPostTable方法的transaction很特别
    * core/server/model/user  -
      * bcrypt user 创建流程
      * generateResetToken: 生成reset token 算法, // BASE64(TIMESTAMP + email + HASH(TIMESTAMP + email + oldPasswordHash + dbHash ))
      * @validateToken
        * heigh efficient way of compare chars: ,
          diff = diff bitor (a.charCodeAt xor b.charCodeAt), xor: only 1^0 = 1
          diff |= token.charCodeAt(i) ^ generatedToken.charCodeAt(i);
        * the way of prevent brutal force attack on reset password token.

    * every schema in this project(exclude many-to-many, one-to-many mapping table) has a uuid field.
      why this is created please see database notes.
    * `(new Date()).toJSON()` is same as `(new Date()).toISOString()` which return '2016-11-29T11:02:29.658Z'
    * create a temp dir to unzip things `var tmpDir = path.join(os.tmpdir(), uuid.v4());`
